// controllers/agency/clientController.js
import mongoose from 'mongoose';
import Client from '../../models/clients/Client.js';
import Agency from '../../models/Agency/Agency.js';

/* ---------------------------------------------------------------------- */
/* 1. Liste des clients pr√©sents dans le tableau `clients` de l'agence    */
/* ---------------------------------------------------------------------- */
export const getClientsByAgency = async (req, res) => {
  try {
    const { agencyId } = req.params;
    console.log('Recherche clients via agency.clients pour :', agencyId);

    // V√©rifier que l'ID est bien un ObjectId
    const agId = new mongoose.Types.ObjectId(agencyId);

    // 1Ô∏è‚É£ R√©cup√©rer l'agence et son tableau "clients"
    const agency = await Agency.findById(agId).select('clients');
    if (!agency) {
      return res.status(404).json({ message: 'Agence non trouv√©e' });
    }

    // 2Ô∏è‚É£ Rechercher les clients dont _id figure dans ce tableau
    const clients = await Client.find({ _id: { $in: agency.clients } });
    console.log(`Nombre de clients trouv√©s : ${clients.length}`);

    res.status(200).json(clients);
  } catch (error) {
    console.error('Erreur getClientsByAgency :', error);
    res.status(500).json({ error: error.message });
  }
};

/* ---------------------------------------------------------------------- */
/* 2. Ajouter un signalement de non‚Äëpassage                               */
/* ---------------------------------------------------------------------- */
export const reportNoShow = async (req, res) => {
  try {
    const clientId = req.params.id;
    const { type, comment, date } = req.body;   // comment correspond au champ description

    const client = await Client.findById(clientId);
    if (!client) return res.status(404).json({ error: 'Client non trouv√©' });

    const newReport = {
      type,
      description: comment,                    // üîë utiliser comment ‚Üí description
      date: date ? new Date(date) : new Date()
    };

    client.nonPassageReports.push(newReport);
    await client.save();

    res.json({ message: 'Report enregistr√©', nonPassageReports: client.nonPassageReports });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

/* ---------------------------------------------------------------------- */
/* 3. Valider la souscription d'un client                                 */
/* ---------------------------------------------------------------------- */
export const validateClientSubscription = async (req, res) => {
  console.log('‚úÖ [validateClientSubscription] - D√©but');

  try {
    const { clientId } = req.params;
    const userId = req.user.id;

    /* Trouver l'agence li√©e √† l'utilisateur connect√© */
    const agency = await Agency.findOne({ userId });
    if (!agency) {
      return res.status(404).json({ message: 'Agence non trouv√©e pour cet utilisateur' });
    }

    const agencyId = agency._id.toString();

    /* R√©cup√©rer le client */
    const client = await Client.findById(clientId);
    if (!client) {
      return res.status(404).json({ message: 'Client non trouv√©' });
    }

    /* V√©rifier l'appartenance √† l'agence */
    if (client.subscribedAgencyId?.toString() !== agencyId) {
      return res.status(403).json({ message: 'Ce client n‚Äôest pas li√© √† votre agence' });
    }

    /* Mettre √† jour la derni√®re entr√©e pending */
    await Client.updateOne(
      { _id: clientId },
      {
        $set: {
          subscriptionStatus: 'active',
          'subscriptionHistory.$[elem].status': 'active',
          'subscriptionHistory.$[elem].date': new Date()
        }
      },
      { arrayFilters: [{ 'elem.status': 'pending' }] }
    );

    /* Recharger le client mis √† jour */
    const updatedClient = await Client.findById(clientId);

    console.log('‚úÖ Abonnement valid√© pour le client:', updatedClient._id);
    return res.status(200).json({
      message: 'Abonnement valid√© avec succ√®s',
      client: {
        id: updatedClient._id,
        firstName: updatedClient.firstName,
        lastName: updatedClient.lastName,
        phone: updatedClient.phone,
        subscriptionStatus: updatedClient.subscriptionStatus,
        subscriptionHistory: updatedClient.subscriptionHistory
      }
    });
  } catch (error) {
    console.error('üí• Erreur serveur:', error.message);
    return res.status(500).json({
      message: 'Erreur lors de la validation',
      error: error.message
    });
  }
};



// R√©cup√©rer tous les signalements des clients d‚Äôune agence
export const getReportsByAgency = async (req, res) => {
  try {
    const { agencyId } = req.params;

    // R√©cup√©rer clients abonn√©s √† cette agence
    const clients = await Client.find({ subscribedAgencyId: agencyId }, 'firstName lastName nonPassageReports');

    if (!clients.length) {
      return res.status(404).json({ message: "Aucun client trouv√© pour cette agence" });
    }

    // Optionnel : filtrer ou organiser les rapports selon besoin

    res.json(clients);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
