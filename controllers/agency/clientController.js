// controllers/agency/clientController.js
import Client from '../../models/clients/Client.js';
import Agency from '../../models/Agency/Agency.js';

// Liste des clients abonn√©s √† une agence
export const getClientsByAgency = async (req, res) => {
  try {
    const { agencyId } = req.params;
    console.log("Recherche clients pour l'agence :", agencyId);

    const clients = await Client.find({ subscribedAgencyId: agencyId });
    console.log(`Nombre de clients trouv√©s : ${clients.length}`);

    res.json(clients);
  } catch (error) {
    console.error("Erreur getClientsByAgency :", error);
    res.status(500).json({ error: error.message });
  }
};

// Ajouter un signalement de non-passage par un client
export const reportNoShow = async (req, res) => {
  try {
    const clientId = req.params.id;
    const { type, comment, date } = req.body;

    const client = await Client.findById(clientId);
    if (!client) return res.status(404).json({ error: 'Client not found' });

    const newReport = {
      type,
      description,
      date: date ? new Date(date) : new Date()  // convertit la date envoy√©e, ou date actuelle si absente
    };

    client.nonPassageReports.push(newReport);  // corrig√© : nonPassageReports (comme dans le mod√®le)
    await client.save();

    res.json({ message: 'Report saved', nonPassageReports: client.nonPassageReports });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

export const validateClientSubscription = async (req, res) => {
  console.log("‚úÖ [validateClientSubscription] - D√©but");

  try {
    const { clientId } = req.params;
    const userId = req.user.id;

    // üîç Trouver l'agence li√©e √† l'utilisateur connect√©
    const agency = await Agency.findOne({ userId });
    if (!agency) {
      console.log("‚ùå Agence non trouv√©e");
      return res.status(404).json({ message: 'Agence non trouv√©e pour cet utilisateur' });
    }

    const agencyId = agency._id.toString();

    // üîç R√©cup√©rer le client
    const client = await Client.findById(clientId);
    if (!client) {
      console.log("‚ùå Client non trouv√©");
      return res.status(404).json({ message: 'Client non trouv√©' });
    }

    if (client.subscribedAgencyId?.toString() !== agencyId) {
      console.log("‚õî Ce client n‚Äôest pas li√© √† votre agence");
      return res.status(403).json({ message: 'Ce client n‚Äôest pas li√© √† votre agence' });
    }

    // ‚úÖ Mise √† jour cibl√©e du statut de la derni√®re demande avec updateOne (√©vite validation compl√®te)
    await Client.updateOne(
      { _id: clientId },
      {
        $set: {
          subscriptionStatus: 'active',
          'subscriptionHistory.$[elem].status': 'active',
          'subscriptionHistory.$[elem].date': new Date(),
        }
      },
      {
        arrayFilters: [{ 'elem.status': 'pending' }]
      }
    );

    console.log("‚úÖ Abonnement valid√© pour le client:", client._id);
    return res.status(200).json({
      message: 'Abonnement valid√© avec succ√®s',
      client: {
        id: client._id,
        firstName: client.firstName,
        lastName: client.lastName,
        subscriptionStatus: 'active',
        subscriptionHistory: client.subscriptionHistory
      }
    });

  } catch (error) {
    console.error("üí• Erreur serveur:", error.message);
    return res.status(500).json({
      message: 'Erreur lors de la validation',
      error: error.message
    });
  }
};


// R√©cup√©rer tous les signalements des clients d‚Äôune agence
export const getReportsByAgency = async (req, res) => {
  try {
    const { agencyId } = req.params;

    // R√©cup√©rer clients abonn√©s √† cette agence
    const clients = await Client.find({ subscribedAgencyId: agencyId }, 'firstName lastName nonPassageReports');

    if (!clients.length) {
      return res.status(404).json({ message: "Aucun client trouv√© pour cette agence" });
    }

    // Optionnel : filtrer ou organiser les rapports selon besoin

    res.json(clients);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
